import { ChangeDetectionStrategy, Component, forwardRef, inject, input, model, } from '@angular/core';
import { GeoJSONSourceComponent } from './geojson-source.component';
import * as i0 from "@angular/core";
export class FeatureComponent {
    GeoJSONSourceComponent = inject(forwardRef(() => GeoJSONSourceComponent));
    /* Init inputs */
    id = model(); // FIXME number only for now https://github.com/mapbox/mapbox-gl-js/issues/2716
    geometry = input.required();
    properties = input();
    type = 'Feature';
    feature;
    ngOnInit() {
        if (!this.id()) {
            this.id.set(this.GeoJSONSourceComponent._getNewFeatureId());
        }
        this.feature = {
            type: this.type,
            geometry: this.geometry(),
            properties: this.properties() ? this.properties() : {},
        };
        this.feature.id = this.id();
        this.GeoJSONSourceComponent._addFeature(this.feature);
    }
    ngOnDestroy() {
        this.GeoJSONSourceComponent._removeFeature(this.feature);
    }
    updateCoordinates(coordinates) {
        this.feature.geometry.coordinates = coordinates;
        this.GeoJSONSourceComponent.updateFeatureData.next(null);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: FeatureComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "20.0.3", type: FeatureComponent, isStandalone: true, selector: "mgl-feature", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, geometry: { classPropertyName: "geometry", publicName: "geometry", isSignal: true, isRequired: true, transformFunction: null }, properties: { classPropertyName: "properties", publicName: "properties", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { id: "idChange" }, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: FeatureComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'mgl-feature',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL25neC1tYXBib3gtZ2wvc3JjL2xpYi9zb3VyY2UvZ2VvanNvbi9mZWF0dXJlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFHVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFDTCxLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0FBT3BFLE1BQU0sT0FBTyxnQkFBZ0I7SUFDbkIsc0JBQXNCLEdBQUcsTUFBTSxDQUNyQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsQ0FDekMsQ0FBQztJQUVGLGlCQUFpQjtJQUNqQixFQUFFLEdBQUcsS0FBSyxFQUFVLENBQUMsQ0FBQywrRUFBK0U7SUFDckcsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQTBCLENBQUM7SUFDcEQsVUFBVSxHQUFHLEtBQUssRUFBNkIsQ0FBQztJQUNoRCxJQUFJLEdBQUcsU0FBa0IsQ0FBQztJQUVsQixPQUFPLENBQTBDO0lBRXpELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ3hELENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsV0FBcUI7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUEwQixDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDbkUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO3VHQWpDVSxnQkFBZ0I7MkZBQWhCLGdCQUFnQixzZUFIakIsRUFBRTs7MkZBR0QsZ0JBQWdCO2tCQUw1QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixRQUFRLEVBQUUsRUFBRTtvQkFDWixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgZm9yd2FyZFJlZixcbiAgaW5qZWN0LFxuICBpbnB1dCxcbiAgbW9kZWwsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR2VvSlNPTlNvdXJjZUNvbXBvbmVudCB9IGZyb20gJy4vZ2VvanNvbi1zb3VyY2UuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWdsLWZlYXR1cmUnLFxuICB0ZW1wbGF0ZTogJycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGZWF0dXJlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIEdlb0pTT05Tb3VyY2VDb21wb25lbnQgPSBpbmplY3Q8R2VvSlNPTlNvdXJjZUNvbXBvbmVudD4oXG4gICAgZm9yd2FyZFJlZigoKSA9PiBHZW9KU09OU291cmNlQ29tcG9uZW50KSxcbiAgKTtcblxuICAvKiBJbml0IGlucHV0cyAqL1xuICBpZCA9IG1vZGVsPG51bWJlcj4oKTsgLy8gRklYTUUgbnVtYmVyIG9ubHkgZm9yIG5vdyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMjcxNlxuICBnZW9tZXRyeSA9IGlucHV0LnJlcXVpcmVkPEdlb0pTT04uR2VvbWV0cnlPYmplY3Q+KCk7XG4gIHByb3BlcnRpZXMgPSBpbnB1dDxHZW9KU09OLkdlb0pzb25Qcm9wZXJ0aWVzPigpO1xuICB0eXBlID0gJ0ZlYXR1cmUnIGFzIGNvbnN0O1xuXG4gIHByaXZhdGUgZmVhdHVyZTogR2VvSlNPTi5GZWF0dXJlPEdlb0pTT04uR2VvbWV0cnlPYmplY3Q+O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5pZCgpKSB7XG4gICAgICB0aGlzLmlkLnNldCh0aGlzLkdlb0pTT05Tb3VyY2VDb21wb25lbnQuX2dldE5ld0ZlYXR1cmVJZCgpKTtcbiAgICB9XG4gICAgdGhpcy5mZWF0dXJlID0ge1xuICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnkoKSxcbiAgICAgIHByb3BlcnRpZXM6IHRoaXMucHJvcGVydGllcygpID8gdGhpcy5wcm9wZXJ0aWVzKCkhIDoge30sXG4gICAgfTtcbiAgICB0aGlzLmZlYXR1cmUuaWQgPSB0aGlzLmlkKCk7XG4gICAgdGhpcy5HZW9KU09OU291cmNlQ29tcG9uZW50Ll9hZGRGZWF0dXJlKHRoaXMuZmVhdHVyZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLkdlb0pTT05Tb3VyY2VDb21wb25lbnQuX3JlbW92ZUZlYXR1cmUodGhpcy5mZWF0dXJlKTtcbiAgfVxuXG4gIHVwZGF0ZUNvb3JkaW5hdGVzKGNvb3JkaW5hdGVzOiBudW1iZXJbXSkge1xuICAgICh0aGlzLmZlYXR1cmUuZ2VvbWV0cnkgYXMgR2VvSlNPTi5Qb2ludCkuY29vcmRpbmF0ZXMgPSBjb29yZGluYXRlcztcbiAgICB0aGlzLkdlb0pTT05Tb3VyY2VDb21wb25lbnQudXBkYXRlRmVhdHVyZURhdGEubmV4dChudWxsKTtcbiAgfVxufVxuIl19