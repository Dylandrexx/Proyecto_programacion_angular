import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Output, ViewChild, inject, input, } from '@angular/core';
import { MapService } from '../map/map.service';
import * as i0 from "@angular/core";
export class PopupComponent {
    mapService = inject(MapService);
    /* Init input */
    closeButton = input();
    closeOnClick = input();
    closeOnMove = input();
    focusAfterOpen = input();
    anchor = input();
    className = input();
    maxWidth = input();
    /* Dynamic input */
    feature = input();
    lngLat = input();
    marker = input();
    offset = input();
    popupClose = new EventEmitter();
    popupOpen = new EventEmitter();
    content;
    popupInstance;
    ngOnInit() {
        if ((this.lngLat() && this.marker()) ||
            (this.feature() && this.lngLat()) ||
            (this.feature() && this.marker())) {
            throw new Error('marker, lngLat, feature input are mutually exclusive');
        }
    }
    ngOnChanges(changes) {
        if ((changes['lngLat'] && !changes['lngLat'].isFirstChange()) ||
            (changes['feature'] && !changes['feature'].isFirstChange())) {
            const newlngLat = changes['lngLat']
                ? this.lngLat()
                : this.feature().geometry.coordinates;
            this.mapService.removePopupFromMap(this.popupInstance, true);
            const popupInstanceTmp = this.createPopup();
            this.mapService.addPopupToMap(popupInstanceTmp, newlngLat, this.popupInstance.isOpen());
            this.popupInstance = popupInstanceTmp;
        }
        if (changes['marker'] && !changes['marker'].isFirstChange()) {
            const previousMarker = changes['marker'].previousValue;
            if (previousMarker.markerInstance) {
                this.mapService.removePopupFromMarker(previousMarker.markerInstance);
            }
            if (this.marker() &&
                this.marker().markerInstance &&
                this.popupInstance) {
                this.mapService.addPopupToMarker(this.marker().markerInstance, this.popupInstance);
            }
        }
        if (changes['offset'] &&
            !changes['offset'].isFirstChange() &&
            this.popupInstance) {
            this.popupInstance.setOffset(this.offset());
        }
    }
    ngAfterViewInit() {
        this.popupInstance = this.createPopup();
        this.addPopup(this.popupInstance);
    }
    ngOnDestroy() {
        if (this.popupInstance) {
            if (this.lngLat() || this.feature()) {
                this.mapService.removePopupFromMap(this.popupInstance);
            }
            else if (this.marker() && this.marker().markerInstance) {
                this.mapService.removePopupFromMarker(this.marker().markerInstance);
            }
        }
        this.popupInstance = undefined;
    }
    createPopup() {
        return this.mapService.createPopup({
            popupOptions: {
                closeButton: this.closeButton(),
                closeOnClick: this.closeOnClick(),
                closeOnMove: this.closeOnMove(),
                focusAfterOpen: this.focusAfterOpen(),
                anchor: this.anchor(),
                offset: this.offset(),
                className: this.className(),
                maxWidth: this.maxWidth(),
            },
            popupEvents: {
                popupOpen: this.popupOpen,
                popupClose: this.popupClose,
            },
        }, this.content.nativeElement);
    }
    addPopup(popup) {
        this.mapService.mapCreated$.subscribe(() => {
            if (this.lngLat() || this.feature()) {
                this.mapService.addPopupToMap(popup, this.lngLat()
                    ? this.lngLat()
                    : this.feature().geometry.coordinates);
            }
            else if (this.marker() && this.marker().markerInstance) {
                this.mapService.addPopupToMarker(this.marker().markerInstance, popup);
            }
            else {
                throw new Error('mgl-popup need either lngLat/marker/feature to be set');
            }
        });
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: PopupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "20.0.3", type: PopupComponent, isStandalone: true, selector: "mgl-popup", inputs: { closeButton: { classPropertyName: "closeButton", publicName: "closeButton", isSignal: true, isRequired: false, transformFunction: null }, closeOnClick: { classPropertyName: "closeOnClick", publicName: "closeOnClick", isSignal: true, isRequired: false, transformFunction: null }, closeOnMove: { classPropertyName: "closeOnMove", publicName: "closeOnMove", isSignal: true, isRequired: false, transformFunction: null }, focusAfterOpen: { classPropertyName: "focusAfterOpen", publicName: "focusAfterOpen", isSignal: true, isRequired: false, transformFunction: null }, anchor: { classPropertyName: "anchor", publicName: "anchor", isSignal: true, isRequired: false, transformFunction: null }, className: { classPropertyName: "className", publicName: "className", isSignal: true, isRequired: false, transformFunction: null }, maxWidth: { classPropertyName: "maxWidth", publicName: "maxWidth", isSignal: true, isRequired: false, transformFunction: null }, feature: { classPropertyName: "feature", publicName: "feature", isSignal: true, isRequired: false, transformFunction: null }, lngLat: { classPropertyName: "lngLat", publicName: "lngLat", isSignal: true, isRequired: false, transformFunction: null }, marker: { classPropertyName: "marker", publicName: "marker", isSignal: true, isRequired: false, transformFunction: null }, offset: { classPropertyName: "offset", publicName: "offset", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { popupClose: "popupClose", popupOpen: "popupOpen" }, viewQueries: [{ propertyName: "content", first: true, predicate: ["content"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: '<div #content><ng-content/></div>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.0.3", ngImport: i0, type: PopupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'mgl-popup',
                    template: '<div #content><ng-content/></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { popupClose: [{
                type: Output
            }], popupOpen: [{
                type: Output
            }], content: [{
                type: ViewChild,
                args: ['content', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbWFwYm94LWdsL3NyYy9saWIvcG9wdXAvcG9wdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBSVosTUFBTSxFQUVOLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFRaEQsTUFBTSxPQUFPLGNBQWM7SUFHakIsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUV4QyxnQkFBZ0I7SUFDaEIsV0FBVyxHQUFHLEtBQUssRUFBK0IsQ0FBQztJQUNuRCxZQUFZLEdBQUcsS0FBSyxFQUFnQyxDQUFDO0lBQ3JELFdBQVcsR0FBRyxLQUFLLEVBQStCLENBQUM7SUFDbkQsY0FBYyxHQUFHLEtBQUssRUFBa0MsQ0FBQztJQUN6RCxNQUFNLEdBQUcsS0FBSyxFQUEwQixDQUFDO0lBQ3pDLFNBQVMsR0FBRyxLQUFLLEVBQTZCLENBQUM7SUFDL0MsUUFBUSxHQUFHLEtBQUssRUFBNEIsQ0FBQztJQUU3QyxtQkFBbUI7SUFDbkIsT0FBTyxHQUFHLEtBQUssRUFBa0MsQ0FBQztJQUNsRCxNQUFNLEdBQUcsS0FBSyxFQUFjLENBQUM7SUFDN0IsTUFBTSxHQUFHLEtBQUssRUFBbUIsQ0FBQztJQUNsQyxNQUFNLEdBQUcsS0FBSyxFQU1YLENBQUM7SUFFTSxVQUFVLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUN0QyxTQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUVQLE9BQU8sQ0FBYTtJQUU1RCxhQUFhLENBQVM7SUFFdEIsUUFBUTtRQUNOLElBQ0UsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFDakMsQ0FBQztZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztRQUMxRSxDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUNFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3pELENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQzNELENBQUM7WUFDRCxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO2dCQUNqQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRztnQkFDaEIsQ0FBQyxDQUFFLElBQUksQ0FBQyxPQUFPLEVBQUcsQ0FBQyxRQUFTLENBQUMsV0FBaUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDOUQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQzNCLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsSUFBSSxDQUFDLGFBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FDN0IsQ0FBQztZQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7UUFDeEMsQ0FBQztRQUNELElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDNUQsTUFBTSxjQUFjLEdBQW9CLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDeEUsSUFBSSxjQUFjLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3ZFLENBQUM7WUFDRCxJQUNFLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLE1BQU0sRUFBRyxDQUFDLGNBQWM7Z0JBQzdCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLENBQUM7Z0JBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FDOUIsSUFBSSxDQUFDLE1BQU0sRUFBRyxDQUFDLGNBQWUsRUFDOUIsSUFBSSxDQUFDLGFBQWEsQ0FDbkIsQ0FBQztZQUNKLENBQUM7UUFDSCxDQUFDO1FBQ0QsSUFDRSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ2pCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRTtZQUNsQyxJQUFJLENBQUMsYUFBYSxFQUNsQixDQUFDO1lBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDOUMsQ0FBQztJQUNILENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDekQsQ0FBQztpQkFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFHLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQzFELElBQUksQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRyxDQUFDLGNBQWUsQ0FBQyxDQUFDO1lBQ3hFLENBQUM7UUFDSCxDQUFDO1FBQ0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7SUFDakMsQ0FBQztJQUVPLFdBQVc7UUFDakIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FDaEM7WUFDRSxZQUFZLEVBQUU7Z0JBQ1osV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQy9CLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNqQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDL0IsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUU7Z0JBQ3JDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNyQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQzNCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFO2FBQzFCO1lBQ0QsV0FBVyxFQUFFO2dCQUNYLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztnQkFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO2FBQzVCO1NBQ0YsRUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FDM0IsQ0FBQztJQUNKLENBQUM7SUFFTyxRQUFRLENBQUMsS0FBWTtRQUMzQixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ3pDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO2dCQUNwQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FDM0IsS0FBSyxFQUNMLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1gsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUc7b0JBQ2hCLENBQUMsQ0FBRSxJQUFJLENBQUMsT0FBTyxFQUFHLENBQUMsUUFBUyxDQUFDLFdBQWlDLENBQ2pFLENBQUM7WUFDSixDQUFDO2lCQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFHLENBQUMsY0FBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFFLENBQUM7aUJBQU0sQ0FBQztnQkFDTixNQUFNLElBQUksS0FBSyxDQUNiLHVEQUF1RCxDQUN4RCxDQUFDO1lBQ0osQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzt1R0E1SVUsY0FBYzsyRkFBZCxjQUFjLDByREFIZixtQ0FBbUM7OzJGQUdsQyxjQUFjO2tCQUwxQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQixRQUFRLEVBQUUsbUNBQW1DO29CQUM3QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7OEJBMkJXLFVBQVU7c0JBQW5CLE1BQU07Z0JBQ0csU0FBUztzQkFBbEIsTUFBTTtnQkFFaUMsT0FBTztzQkFBOUMsU0FBUzt1QkFBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZCxcbiAgaW5qZWN0LFxuICBpbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMbmdMYXRMaWtlLCBQb2ludExpa2UsIFBvcHVwLCBQb3B1cE9wdGlvbnMgfSBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0IHsgTWFwU2VydmljZSB9IGZyb20gJy4uL21hcC9tYXAuc2VydmljZSc7XG5pbXBvcnQgeyBNYXJrZXJDb21wb25lbnQgfSBmcm9tICcuLi9tYXJrZXIvbWFya2VyLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ21nbC1wb3B1cCcsXG4gIHRlbXBsYXRlOiAnPGRpdiAjY29udGVudD48bmctY29udGVudC8+PC9kaXY+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFBvcHVwQ29tcG9uZW50XG4gIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE9uSW5pdFxue1xuICBwcml2YXRlIG1hcFNlcnZpY2UgPSBpbmplY3QoTWFwU2VydmljZSk7XG5cbiAgLyogSW5pdCBpbnB1dCAqL1xuICBjbG9zZUJ1dHRvbiA9IGlucHV0PFBvcHVwT3B0aW9uc1snY2xvc2VCdXR0b24nXT4oKTtcbiAgY2xvc2VPbkNsaWNrID0gaW5wdXQ8UG9wdXBPcHRpb25zWydjbG9zZU9uQ2xpY2snXT4oKTtcbiAgY2xvc2VPbk1vdmUgPSBpbnB1dDxQb3B1cE9wdGlvbnNbJ2Nsb3NlT25Nb3ZlJ10+KCk7XG4gIGZvY3VzQWZ0ZXJPcGVuID0gaW5wdXQ8UG9wdXBPcHRpb25zWydmb2N1c0FmdGVyT3BlbiddPigpO1xuICBhbmNob3IgPSBpbnB1dDxQb3B1cE9wdGlvbnNbJ2FuY2hvciddPigpO1xuICBjbGFzc05hbWUgPSBpbnB1dDxQb3B1cE9wdGlvbnNbJ2NsYXNzTmFtZSddPigpO1xuICBtYXhXaWR0aCA9IGlucHV0PFBvcHVwT3B0aW9uc1snbWF4V2lkdGgnXT4oKTtcblxuICAvKiBEeW5hbWljIGlucHV0ICovXG4gIGZlYXR1cmUgPSBpbnB1dDxHZW9KU09OLkZlYXR1cmU8R2VvSlNPTi5Qb2ludD4+KCk7XG4gIGxuZ0xhdCA9IGlucHV0PExuZ0xhdExpa2U+KCk7XG4gIG1hcmtlciA9IGlucHV0PE1hcmtlckNvbXBvbmVudD4oKTtcbiAgb2Zmc2V0ID0gaW5wdXQ8XG4gICAgfCBudW1iZXJcbiAgICB8IFBvaW50TGlrZVxuICAgIHwge1xuICAgICAgICBbYW5jaG9yOiBzdHJpbmddOiBbbnVtYmVyLCBudW1iZXJdO1xuICAgICAgfVxuICA+KCk7XG5cbiAgQE91dHB1dCgpIHBvcHVwQ2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG4gIEBPdXRwdXQoKSBwb3B1cE9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgQFZpZXdDaGlsZCgnY29udGVudCcsIHsgc3RhdGljOiB0cnVlIH0pIGNvbnRlbnQ6IEVsZW1lbnRSZWY7XG5cbiAgcG9wdXBJbnN0YW5jZT86IFBvcHVwO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmIChcbiAgICAgICh0aGlzLmxuZ0xhdCgpICYmIHRoaXMubWFya2VyKCkpIHx8XG4gICAgICAodGhpcy5mZWF0dXJlKCkgJiYgdGhpcy5sbmdMYXQoKSkgfHxcbiAgICAgICh0aGlzLmZlYXR1cmUoKSAmJiB0aGlzLm1hcmtlcigpKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXJrZXIsIGxuZ0xhdCwgZmVhdHVyZSBpbnB1dCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlJyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChcbiAgICAgIChjaGFuZ2VzWydsbmdMYXQnXSAmJiAhY2hhbmdlc1snbG5nTGF0J10uaXNGaXJzdENoYW5nZSgpKSB8fFxuICAgICAgKGNoYW5nZXNbJ2ZlYXR1cmUnXSAmJiAhY2hhbmdlc1snZmVhdHVyZSddLmlzRmlyc3RDaGFuZ2UoKSlcbiAgICApIHtcbiAgICAgIGNvbnN0IG5ld2xuZ0xhdCA9IGNoYW5nZXNbJ2xuZ0xhdCddXG4gICAgICAgID8gdGhpcy5sbmdMYXQoKSFcbiAgICAgICAgOiAodGhpcy5mZWF0dXJlKCkhLmdlb21ldHJ5IS5jb29yZGluYXRlcyEgYXMgW251bWJlciwgbnVtYmVyXSk7XG4gICAgICB0aGlzLm1hcFNlcnZpY2UucmVtb3ZlUG9wdXBGcm9tTWFwKHRoaXMucG9wdXBJbnN0YW5jZSEsIHRydWUpO1xuICAgICAgY29uc3QgcG9wdXBJbnN0YW5jZVRtcCA9IHRoaXMuY3JlYXRlUG9wdXAoKTtcbiAgICAgIHRoaXMubWFwU2VydmljZS5hZGRQb3B1cFRvTWFwKFxuICAgICAgICBwb3B1cEluc3RhbmNlVG1wLFxuICAgICAgICBuZXdsbmdMYXQsXG4gICAgICAgIHRoaXMucG9wdXBJbnN0YW5jZSEuaXNPcGVuKCksXG4gICAgICApO1xuICAgICAgdGhpcy5wb3B1cEluc3RhbmNlID0gcG9wdXBJbnN0YW5jZVRtcDtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXNbJ21hcmtlciddICYmICFjaGFuZ2VzWydtYXJrZXInXS5pc0ZpcnN0Q2hhbmdlKCkpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzTWFya2VyOiBNYXJrZXJDb21wb25lbnQgPSBjaGFuZ2VzWydtYXJrZXInXS5wcmV2aW91c1ZhbHVlO1xuICAgICAgaWYgKHByZXZpb3VzTWFya2VyLm1hcmtlckluc3RhbmNlKSB7XG4gICAgICAgIHRoaXMubWFwU2VydmljZS5yZW1vdmVQb3B1cEZyb21NYXJrZXIocHJldmlvdXNNYXJrZXIubWFya2VySW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm1hcmtlcigpICYmXG4gICAgICAgIHRoaXMubWFya2VyKCkhLm1hcmtlckluc3RhbmNlICYmXG4gICAgICAgIHRoaXMucG9wdXBJbnN0YW5jZVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMubWFwU2VydmljZS5hZGRQb3B1cFRvTWFya2VyKFxuICAgICAgICAgIHRoaXMubWFya2VyKCkhLm1hcmtlckluc3RhbmNlISxcbiAgICAgICAgICB0aGlzLnBvcHVwSW5zdGFuY2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGNoYW5nZXNbJ29mZnNldCddICYmXG4gICAgICAhY2hhbmdlc1snb2Zmc2V0J10uaXNGaXJzdENoYW5nZSgpICYmXG4gICAgICB0aGlzLnBvcHVwSW5zdGFuY2VcbiAgICApIHtcbiAgICAgIHRoaXMucG9wdXBJbnN0YW5jZS5zZXRPZmZzZXQodGhpcy5vZmZzZXQoKSk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucG9wdXBJbnN0YW5jZSA9IHRoaXMuY3JlYXRlUG9wdXAoKTtcbiAgICB0aGlzLmFkZFBvcHVwKHRoaXMucG9wdXBJbnN0YW5jZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wb3B1cEluc3RhbmNlKSB7XG4gICAgICBpZiAodGhpcy5sbmdMYXQoKSB8fCB0aGlzLmZlYXR1cmUoKSkge1xuICAgICAgICB0aGlzLm1hcFNlcnZpY2UucmVtb3ZlUG9wdXBGcm9tTWFwKHRoaXMucG9wdXBJbnN0YW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWFya2VyKCkgJiYgdGhpcy5tYXJrZXIoKSEubWFya2VySW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5tYXBTZXJ2aWNlLnJlbW92ZVBvcHVwRnJvbU1hcmtlcih0aGlzLm1hcmtlcigpIS5tYXJrZXJJbnN0YW5jZSEpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnBvcHVwSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVBvcHVwKCkge1xuICAgIHJldHVybiB0aGlzLm1hcFNlcnZpY2UuY3JlYXRlUG9wdXAoXG4gICAgICB7XG4gICAgICAgIHBvcHVwT3B0aW9uczoge1xuICAgICAgICAgIGNsb3NlQnV0dG9uOiB0aGlzLmNsb3NlQnV0dG9uKCksXG4gICAgICAgICAgY2xvc2VPbkNsaWNrOiB0aGlzLmNsb3NlT25DbGljaygpLFxuICAgICAgICAgIGNsb3NlT25Nb3ZlOiB0aGlzLmNsb3NlT25Nb3ZlKCksXG4gICAgICAgICAgZm9jdXNBZnRlck9wZW46IHRoaXMuZm9jdXNBZnRlck9wZW4oKSxcbiAgICAgICAgICBhbmNob3I6IHRoaXMuYW5jaG9yKCksXG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCgpLFxuICAgICAgICAgIGNsYXNzTmFtZTogdGhpcy5jbGFzc05hbWUoKSxcbiAgICAgICAgICBtYXhXaWR0aDogdGhpcy5tYXhXaWR0aCgpLFxuICAgICAgICB9LFxuICAgICAgICBwb3B1cEV2ZW50czoge1xuICAgICAgICAgIHBvcHVwT3BlbjogdGhpcy5wb3B1cE9wZW4sXG4gICAgICAgICAgcG9wdXBDbG9zZTogdGhpcy5wb3B1cENsb3NlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGFkZFBvcHVwKHBvcHVwOiBQb3B1cCkge1xuICAgIHRoaXMubWFwU2VydmljZS5tYXBDcmVhdGVkJC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMubG5nTGF0KCkgfHwgdGhpcy5mZWF0dXJlKCkpIHtcbiAgICAgICAgdGhpcy5tYXBTZXJ2aWNlLmFkZFBvcHVwVG9NYXAoXG4gICAgICAgICAgcG9wdXAsXG4gICAgICAgICAgdGhpcy5sbmdMYXQoKVxuICAgICAgICAgICAgPyB0aGlzLmxuZ0xhdCgpIVxuICAgICAgICAgICAgOiAodGhpcy5mZWF0dXJlKCkhLmdlb21ldHJ5IS5jb29yZGluYXRlcyEgYXMgW251bWJlciwgbnVtYmVyXSksXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubWFya2VyKCkgJiYgdGhpcy5tYXJrZXIoKSEubWFya2VySW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5tYXBTZXJ2aWNlLmFkZFBvcHVwVG9NYXJrZXIodGhpcy5tYXJrZXIoKSEubWFya2VySW5zdGFuY2UhLCBwb3B1cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ21nbC1wb3B1cCBuZWVkIGVpdGhlciBsbmdMYXQvbWFya2VyL2ZlYXR1cmUgdG8gYmUgc2V0JyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19